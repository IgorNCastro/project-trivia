{"version":3,"sources":["trivia.png","redux/actions/fetchAPI.js","redux/actions/index.js","pages/Login.js","redux/components/Header.js","pages/Game.js","pages/Settings.js","pages/Feedback.js","helpers/helper.js","pages/Ranking.js","App.js","redux/reducers/player.js","redux/reducers/index.js","redux/store/index.js","index.js"],"names":["module","exports","fetchToken","a","fetch","response","json","token","console","log","fetchGravatar","email","hash","md5","toString","e","fetchQuestions","input","url","questions","resetScore","state","type","Login","props","verifyDisabled","name","length","setState","isDisabled","handleChange","target","value","handleLogin","history","rankingStorage","sendToStore","tokenAPI","gravatarAPI","localSt","score","picture","localStorage","setItem","JSON","stringify","push","dispPlayerInfo","store","toSettingsBtn","parse","getItem","this","className","src","logo","alt","htmlFor","data-testid","onChange","autocomplete","disabled","onClick","Component","connect","dispatch","setPlayer","Header","setHeader","recoverUserInfo","rankingLength","player","Game","setQuestions","tokenLocalSt","response_code","invalidToken","results","selectQuestion","counter","questionTurn","filter","i","index","question","renderAlternatives","renderTimer","quest","correctAnswer","correct_answer","wrongAnswers","incorrect_answers","map","key","id","allAlternatives","alternatives","sort","Math","random","clickedAnswer","updateScore","nextBtn","right","wrong","killTimer","difficulty","innerHTML","calculateScore","number","dispScore","seconds","assertions","interval","setInterval","setTimer","second","clearInterval","btnDisabled","clickedNextBtn","prevState","nextQuestion","counterNext","category","each","setScore","Settings","toLoginBtn","Feedback","clickedPlayAgain","dispResetScore","clickedToRanking","minRights","helper","Ranking","clickedGoHome","rankingUsers","rankedList","user","App","exact","path","component","INITIAL_STATE","gravatarEmail","action","rootReducer","combineReducers","createStore","composeWithDevTools","applyMiddleware","thunk","window","Cypress","ReactDOM","render","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.18fa2d7f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";","import md5 from 'crypto-js/md5';\n\nexport const fetchToken = async () => {\n  try {\n    const url = 'https://opentdb.com/api_token.php?command=request';\n    const response = await fetch(url);\n    const token = await response.json();\n    return token;\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nexport const fetchGravatar = (email) => {\n  try {\n    const hash = md5(email).toString();\n    const url = `https://www.gravatar.com/avatar/${hash}`;\n    return url;\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nexport const fetchQuestions = async (input) => {\n  try {\n    const url = `https://opentdb.com/api.php?amount=5&token=${input}`;\n    const response = await fetch(url);\n    const questions = await response.json();\n    return questions;\n  } catch (e) {\n    console.log(e);\n  }\n};\n","export const SET_PLAYER_INFO = 'SET_PLAYER_INFO';\nexport const SET_SCORE = 'SET_SCORE';\nexport const RESET_SCORE = 'RESET_SCORE';\n\nexport const setPlayer = (state) => ({\n  type: 'SET_PLAYER_INFO',\n  ...state,\n});\n\nexport const setScore = (state) => ({\n  type: 'SET_SCORE',\n  ...state,\n});\n\nexport const resetScore = (state) => ({\n  type: 'RESET_SCORE',\n  ...state,\n});\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport logo from '../trivia.png';\nimport '../App.css';\nimport { fetchToken, fetchGravatar } from '../redux/actions/fetchAPI';\nimport { setPlayer } from '../redux/actions';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      name: '',\n      isDisabled: true,\n      rankingStorage: JSON.parse(localStorage.getItem('ranking')) || [],\n    };\n  }\n\n  verifyDisabled = () => {\n    const { email, name } = this.state;\n    if (email.length > 0 && name.length > 0) {\n      this.setState({\n        isDisabled: false,\n      });\n    }\n  }\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    }, () => {\n      this.verifyDisabled();\n    });\n  };\n\n  handleLogin = async () => {\n    const { history } = this.props;\n    const { name, email, rankingStorage } = this.state;\n    await this.sendToStore(name, email);\n    const tokenAPI = await fetchToken();\n    const gravatarAPI = fetchGravatar(email);\n    const localSt = [...rankingStorage, {\n      name,\n      score: 0,\n      picture: gravatarAPI,\n    }];\n    localStorage.setItem('token', tokenAPI.token);\n    localStorage.setItem('ranking', JSON.stringify(localSt));\n    history.push('/game');\n  };\n\n  sendToStore = async (name, email) => {\n    const { dispPlayerInfo } = this.props;\n    const store = { name, email };\n    await dispPlayerInfo(store);\n  }\n\n  toSettingsBtn = () => {\n    const { history } = this.props;\n    history.push('/settings');\n  };\n\n  render() {\n    const { isDisabled, name, email } = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <img src={ logo } className=\"App-logo\" alt=\"logo\" />\n          <form className=\"form-header\">\n            <label htmlFor=\"name\">\n              Nome\n              <br />\n              <input\n                type=\"text\"\n                name=\"name\"\n                data-testid=\"input-player-name\"\n                value={ name }\n                onChange={ this.handleChange }\n                autocomplete=\"off\"\n              />\n            </label>\n            <label htmlFor=\"email\">\n              Email\n              <br />\n              <input\n                type=\"email\"\n                name=\"email\"\n                data-testid=\"input-gravatar-email\"\n                value={ email }\n                onChange={ this.handleChange }\n                autocomplete=\"off\"\n              />\n            </label>\n            <button\n              type=\"button\"\n              data-testid=\"btn-play\"\n              disabled={ isDisabled }\n              onClick={ this.handleLogin }\n            >\n              Play\n            </button>\n            <button\n              type=\"button\"\n              data-testid=\"btn-settings\"\n              onClick={ this.toSettingsBtn }\n            >\n              Settings\n            </button>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nLogin.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  dispPlayerInfo: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispPlayerInfo: (state) => dispatch(setPlayer(state)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport logo from '../../trivia.png';\n\nclass Header extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      picture: '',\n      score: 0,\n    };\n  }\n\n  componentDidMount() {\n    this.setHeader();\n  }\n\n  setHeader = () => {\n    const recoverUserInfo = JSON.parse(localStorage.getItem('ranking'));\n    const { score } = this.props;\n    const rankingLength = recoverUserInfo.length - 1;\n    this.setState({\n      name: recoverUserInfo[rankingLength].name,\n      picture: recoverUserInfo[rankingLength].picture,\n      score,\n    });\n  }\n\n  render() {\n    const { name, picture, score } = this.state;\n    return (\n      <div>\n        <header>\n          <img src={ logo } className=\"logo-in-game\" alt=\"logo\" />\n          <div className=\"info-header\">\n            <img\n              src={ picture }\n              alt={ name }\n              data-testid=\"header-profile-picture\"\n            />\n            <div className=\"name-score-header\">\n              <h3\n                data-testid=\"header-player-name\"\n              >\n                { name }\n              </h3>\n              <h3\n                data-testid=\"header-score\"\n              >\n                { score }\n              </h3>\n            </div>\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nHeader.propTypes = {\n  score: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  score: state.player.score,\n});\n\nexport default connect(mapStateToProps)(Header);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport '../App.css';\nimport { fetchQuestions } from '../redux/actions/fetchAPI';\nimport Header from '../redux/components/Header';\nimport { setScore } from '../redux/actions';\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questions: [],\n      question: [],\n      alternatives: [],\n      counter: 0,\n      seconds: 30,\n      btnDisabled: false,\n      nextBtn: false,\n      right: '',\n      wrong: '',\n    };\n  }\n\n  componentDidMount() {\n    this.setQuestions();\n  }\n\n  setQuestions = async () => {\n    const tokenLocalSt = localStorage.getItem('token');\n    const questions = await fetchQuestions(tokenLocalSt);\n    if (questions.response_code !== 0) return this.invalidToken();\n    this.setState({\n      questions: questions.results,\n    }, () => {\n      this.selectQuestion();\n    });\n  }\n\n  invalidToken = () => {\n    const { history } = this.props;\n    localStorage.setItem('token', '');\n    history.push('/');\n  }\n\n  // Filtrando a array de objetos com as 5 perguntas, para uma nova variavel contendo apenas a da vez\n  selectQuestion = () => {\n    const { questions, counter } = this.state;\n    const questionTurn = questions.filter((i, index) => (index === counter));\n    this.setState({ question: questionTurn });\n    this.renderAlternatives(questionTurn[0]);\n    this.renderTimer();\n  }\n\n  renderAlternatives = (quest) => {\n    const {\n      correct_answer: correctAnswer,\n      incorrect_answers: incorrectAnswers,\n    } = quest;\n    const wrongAnswers = incorrectAnswers.map((alt, index) => (\n      {\n        key: index,\n        className: 'wrong',\n        id: `wrong-answer-${index}`,\n        name: alt,\n      }\n    ));\n    const rightAnswer = {\n      key: 'right',\n      className: 'right',\n      id: 'correct-answer',\n      name: correctAnswer,\n    };\n    const allAlternatives = [rightAnswer, ...wrongAnswers];\n    // Extraido de https://flaviocopes.com/how-to-shuffle-array-javascript/\n    const NUMBER_MATH_RANDOM = 0.5;\n    const alternatives = allAlternatives.sort(() => Math.random() - NUMBER_MATH_RANDOM);\n    this.setState({ alternatives });\n  }\n\n  clickedAnswer = (e) => {\n    this.updateScore(e);\n    this.setState({\n      nextBtn: true,\n      right: 'right-answer',\n      wrong: 'wrong-answer',\n    });\n  }\n\n  updateScore = ({ target }) => {\n    this.killTimer();\n    const { question } = this.state;\n    const { difficulty } = question[0];\n    const DIFF_HARD_BONUS = 3;\n    const DIFF_MEDIUM_BONUS = 2;\n    const selectedAlt = target.innerHTML;\n    if (selectedAlt === question[0].correct_answer) {\n      if (difficulty === 'hard') return this.calculateScore(DIFF_HARD_BONUS);\n      if (difficulty === 'medium') return this.calculateScore(DIFF_MEDIUM_BONUS);\n      return this.calculateScore(1);\n    }\n  }\n\n  calculateScore = async (number) => {\n    const RIGHT_ANSWER_POINTS = 10;\n    const { dispScore } = this.props;\n    const { seconds } = this.state;\n    const score = RIGHT_ANSWER_POINTS + (seconds * number);\n    const assertions = 1;\n    const store = { score, assertions };\n    await dispScore(store);\n  }\n\n  renderTimer = () => {\n    const ONE_SECOND = 1000;\n    const interval = setInterval(this.setTimer, ONE_SECOND);\n    this.setState({ interval });\n  }\n\n  setTimer = () => {\n    const { seconds } = this.state;\n    if (seconds === 0) return this.killTimer();\n    const second = seconds - 1;\n    this.setState({ seconds: second });\n  }\n\n  killTimer = () => {\n    const { interval } = this.state;\n    clearInterval(interval);\n    this.setState({ btnDisabled: true, nextBtn: true });\n  }\n\n  clickedNextBtn = () => {\n    this.setState((prevState) => ({\n      counter: prevState.counter + 1,\n      seconds: 30,\n      btnDisabled: false,\n      nextBtn: false,\n      right: '',\n      wrong: '',\n    }));\n    this.nextQuestion();\n  }\n\n  nextQuestion = () => {\n    const LIMIT_QUESTION = 5;\n    const { questions, counter } = this.state;\n    let counterNext = counter;\n    counterNext += 1;\n    if (counterNext >= LIMIT_QUESTION) {\n      const { history } = this.props;\n      return history.push('/feedback');\n    }\n    const questionTurn = questions.filter((i, index) => (index === counterNext));\n    this.setState({ question: questionTurn });\n    this.renderAlternatives(questionTurn[0]);\n    this.renderTimer();\n  }\n\n  render() {\n    const {\n      question,\n      alternatives,\n      seconds,\n      nextBtn,\n      btnDisabled,\n      right,\n      wrong,\n    } = this.state;\n    return (\n      <div className=\"game-card\">\n        <Header />\n        <div className=\"time-clock\">\n          <h3>Time</h3>\n          <h3>{ seconds }</h3>\n        </div>\n        <div>\n          { nextBtn && (\n            <button\n              type=\"button\"\n              data-testid=\"btn-next\"\n              onClick={ this.clickedNextBtn }\n            >\n              Next\n            </button>\n          )}\n        </div>\n        <div className=\"cat-quest-answer\">\n          { question.map((quest, index) => (\n            <div key={ index }>\n              <h2\n                data-testid=\"question-category\"\n              >\n                { quest.category }\n              </h2>\n              <h1\n                data-testid=\"question-text\"\n              >\n                { quest.question }\n              </h1>\n            </div>\n          ))}\n          <div\n            data-testid=\"answer-options\"\n          >\n            { alternatives.map((each) => (\n              <button\n                key={ each.key }\n                data-testid={ each.id }\n                className={ each.className === 'right' ? right : wrong }\n                type=\"button\"\n                onClick={ this.clickedAnswer }\n                disabled={ btnDisabled }\n              >\n                { each.name }\n              </button>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nGame.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  dispScore: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispScore: (state) => dispatch(setScore(state)),\n});\n\nexport default connect(null, mapDispatchToProps)(Game);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport '../App.css';\n\nexport default class Settings extends Component {\n  toLoginBtn = () => {\n    const { history } = this.props;\n    history.push('/');\n  };\n\n  render() {\n    return (\n      <div>\n        <header>\n          <h1\n            data-testid=\"settings-title\"\n          >\n            Settings\n          </h1>\n          <button\n            type=\"button\"\n            onClick={ this.toLoginBtn }\n          >\n            Back\n          </button>\n        </header>\n      </div>\n    );\n  }\n}\n\nSettings.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport '../App.css';\nimport Header from '../redux/components/Header';\nimport { resetScore } from '../redux/actions';\n\nclass Feedback extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      score: 0,\n      assertions: 0,\n      minRights: 3,\n    };\n  }\n\n  componentDidMount() {\n    const { score, assertions } = this.props;\n    this.setState({ score, assertions });\n    const recoverUserInfo = JSON.parse(localStorage.getItem('ranking'));\n    const rankingLength = recoverUserInfo.length - 1;\n    recoverUserInfo[rankingLength].score = score;\n    localStorage.setItem('ranking', JSON.stringify(recoverUserInfo));\n  }\n\n  clickedPlayAgain = async () => {\n    const { history, dispResetScore } = this.props;\n    const store = { score: 0, assertions: 0 };\n    await dispResetScore(store);\n    history.push('/');\n  }\n\n  clickedToRanking = () => {\n    const { history } = this.props;\n    history.push('/ranking');\n  }\n\n  render() {\n    const { score, assertions, minRights } = this.state;\n    return (\n      <div>\n        <Header />\n        <div className=\"feed-final\">\n          { assertions < minRights ? (\n            <h3\n              data-testid=\"feedback-text\"\n            >\n              Could be better...\n            </h3>\n          ) : (\n            <h3\n              data-testid=\"feedback-text\"\n            >\n              Well Done!\n            </h3>\n          )}\n          <p>Placar Final:</p>\n          <p\n            data-testid=\"feedback-total-score\"\n          >\n            { score }\n          </p>\n          <p>Acertos:</p>\n          <p\n            data-testid=\"feedback-total-question\"\n          >\n            { assertions }\n          </p>\n          <button\n            type=\"button\"\n            data-testid=\"btn-play-again\"\n            onClick={ this.clickedPlayAgain }\n          >\n            Play Again\n          </button>\n          <button\n            type=\"button\"\n            data-testid=\"btn-ranking\"\n            onClick={ this.clickedToRanking }\n          >\n            Ranking\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nFeedback.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  score: PropTypes.number.isRequired,\n  assertions: PropTypes.number.isRequired,\n  dispResetScore: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  score: state.player.score,\n  assertions: state.player.assertions,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispResetScore: (state) => dispatch(resetScore(state)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Feedback);\n","const helper = ({ score: a }, { score: b }) => b - a;\n\nexport default helper;\n\n// helper deve ser testado como uma simples função (teste unitário);\n// expect que retorna b - a....\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport '../App.css';\nimport { resetScore } from '../redux/actions';\nimport helper from '../helpers/helper';\n\nclass Ranking extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rankingUsers: [],\n    };\n  }\n\n  componentDidMount() {\n    const recoverUserInfo = JSON.parse(localStorage.getItem('ranking'));\n    // https://stackoverflow.com/questions/54623130/javascript-sort-an-array-of-objects-by-a-numeric-property-in-each-object\n    const rankedList = recoverUserInfo.sort(helper);\n    this.setState({ rankingUsers: rankedList });\n  }\n\n  clickedGoHome = async () => {\n    const { history, dispResetScore } = this.props;\n    const store = { score: 0, assertions: 0 };\n    await dispResetScore(store);\n    history.push('/');\n  }\n\n  render() {\n    const { rankingUsers } = this.state;\n    return (\n      <div>\n        <h1\n          className=\"title-ranking\"\n          data-testid=\"ranking-title\"\n        >\n          Ranking\n        </h1>\n        { rankingUsers.map((user, index) => (\n          <div key={ index } className=\"ranking\">\n            <img src={ user.picture } alt={ user.name } />\n            <h4\n              data-testid={ `player-name-${index}` }\n            >\n              { user.name }\n            </h4>\n            <h4\n              data-testid={ `player-score-${index}` }\n            >\n              { user.score }\n            </h4>\n          </div>\n        ))}\n        <div className=\"btn-ranking\">\n          <button\n            type=\"button\"\n            data-testid=\"btn-go-home\"\n            onClick={ this.clickedGoHome }\n          >\n            Go Home\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nRanking.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  dispResetScore: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispResetScore: (state) => dispatch(resetScore(state)),\n});\n\nexport default connect(null, mapDispatchToProps)(Ranking);\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport './App.css';\nimport Login from './pages/Login';\nimport Game from './pages/Game';\nimport Settings from './pages/Settings';\nimport Feedback from './pages/Feedback';\nimport Ranking from './pages/Ranking';\n\nexport default function App() {\n  return (\n    <div>\n      <Switch>\n        <Route exact path=\"/game\" component={ Game } />\n        <Route exact path=\"/settings\" component={ Settings } />\n        <Route exact path=\"/feedback\" component={ Feedback } />\n        <Route exact path=\"/ranking\" component={ Ranking } />\n        <Route exact path=\"/\" component={ Login } />\n      </Switch>\n    </div>\n  );\n}\n","import { SET_PLAYER_INFO, SET_SCORE, RESET_SCORE } from '../actions';\n\nconst INITIAL_STATE = {\n  name: '',\n  assertions: 0,\n  score: 0,\n  gravatarEmail: '',\n};\n\nconst player = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SET_PLAYER_INFO:\n    return {\n      ...state,\n      name: action.name,\n      gravatarEmail: action.email,\n    };\n  case SET_SCORE:\n    return {\n      ...state,\n      score: state.score + action.score,\n      assertions: state.assertions + action.assertions,\n    };\n  case RESET_SCORE:\n    return {\n      ...state,\n      score: action.score,\n      assertions: action.assertions,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default player;\n","import { combineReducers } from 'redux';\nimport player from './player';\n\nconst rootReducer = combineReducers({ player });\n\nexport default rootReducer;\n","import { legacy_createStore as createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/index';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}